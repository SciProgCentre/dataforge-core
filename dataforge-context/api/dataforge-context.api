public abstract class hep/dataforge/context/AbstractPlugin : hep/dataforge/context/Plugin {
	public fun <init> ()V
	public fun <init> (Lhep/dataforge/meta/Meta;)V
	public synthetic fun <init> (Lhep/dataforge/meta/Meta;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun attach (Lhep/dataforge/context/Context;)V
	public fun content (Ljava/lang/String;)Ljava/util/Map;
	public final fun dependsOn ()Ljava/util/Map;
	public fun detach ()V
	public fun getContext ()Lhep/dataforge/context/Context;
	public fun getDefaultChainTarget ()Ljava/lang/String;
	public fun getDefaultTarget ()Ljava/lang/String;
	public fun getMeta ()Lhep/dataforge/meta/Meta;
	public fun getName ()Lhep/dataforge/names/Name;
	protected final fun require (Lhep/dataforge/context/PluginFactory;Lhep/dataforge/meta/Meta;)Lkotlin/properties/ReadOnlyProperty;
	public static synthetic fun require$default (Lhep/dataforge/context/AbstractPlugin;Lhep/dataforge/context/PluginFactory;Lhep/dataforge/meta/Meta;ILjava/lang/Object;)Lkotlin/properties/ReadOnlyProperty;
	public fun toMeta ()Lhep/dataforge/meta/Meta;
}

public final class hep/dataforge/context/AbstractPluginKt {
	public static final fun toMap (Ljava/util/Collection;)Ljava/util/Map;
}

public final class hep/dataforge/context/ClassLoaderPlugin : hep/dataforge/context/AbstractPlugin {
	public static final field Companion Lhep/dataforge/context/ClassLoaderPlugin$Companion;
	public fun <init> (Ljava/lang/ClassLoader;)V
	public fun getTag ()Lhep/dataforge/context/PluginTag;
	public final fun services (Lkotlin/reflect/KClass;)Lkotlin/sequences/Sequence;
}

public final class hep/dataforge/context/ClassLoaderPlugin$Companion {
	public final fun getDEFAULT ()Lhep/dataforge/context/ClassLoaderPlugin;
}

public final class hep/dataforge/context/ClassLoaderPluginKt {
	public static final fun getClassLoaderPlugin (Lhep/dataforge/context/Context;)Lhep/dataforge/context/ClassLoaderPlugin;
}

public class hep/dataforge/context/Context : hep/dataforge/meta/MetaRepr, hep/dataforge/misc/Named, hep/dataforge/provider/Provider, kotlinx/coroutines/CoroutineScope {
	public static final field Companion Lhep/dataforge/context/Context$Companion;
	public static final field PROPERTY_TARGET Ljava/lang/String;
	public fun close ()V
	public fun content (Ljava/lang/String;)Ljava/util/Map;
	public final fun content (Ljava/lang/String;Z)Ljava/util/Map;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getDefaultChainTarget ()Ljava/lang/String;
	public fun getDefaultTarget ()Ljava/lang/String;
	public final fun getName ()Lhep/dataforge/names/Name;
	public final fun getParent ()Lhep/dataforge/context/Context;
	public final fun getPlugins ()Lhep/dataforge/context/PluginManager;
	public fun toMeta ()Lhep/dataforge/meta/Meta;
}

public final class hep/dataforge/context/Context$Companion {
}

public abstract interface class hep/dataforge/context/ContextAware {
	public abstract fun getContext ()Lhep/dataforge/context/Context;
}

public final class hep/dataforge/context/ContextBuilder {
	public fun <init> ()V
	public fun <init> (Lhep/dataforge/context/Context;Ljava/lang/String;)V
	public synthetic fun <init> (Lhep/dataforge/context/Context;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun build ()Lhep/dataforge/context/Context;
	public final fun getName ()Ljava/lang/String;
	public final fun plugin (Lhep/dataforge/context/PluginFactory;Lkotlin/jvm/functions/Function1;)V
	public final fun plugin (Lhep/dataforge/context/PluginTag;Lkotlin/jvm/functions/Function1;)V
	public final fun plugin (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
	public static synthetic fun plugin$default (Lhep/dataforge/context/ContextBuilder;Lhep/dataforge/context/PluginFactory;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
	public static synthetic fun plugin$default (Lhep/dataforge/context/ContextBuilder;Lhep/dataforge/context/PluginTag;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
	public static synthetic fun plugin$default (Lhep/dataforge/context/ContextBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
	public final fun properties (Lkotlin/jvm/functions/Function1;)V
	public final fun setName (Ljava/lang/String;)V
}

public final class hep/dataforge/context/ContextKt {
	public static final fun Context (Ljava/lang/String;Lhep/dataforge/context/Context;Lkotlin/jvm/functions/Function1;)Lhep/dataforge/context/Context;
	public static synthetic fun Context$default (Ljava/lang/String;Lhep/dataforge/context/Context;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lhep/dataforge/context/Context;
}

public abstract interface class hep/dataforge/context/Factory {
	public abstract fun invoke (Lhep/dataforge/meta/Meta;Lhep/dataforge/context/Context;)Ljava/lang/Object;
}

public final class hep/dataforge/context/Factory$DefaultImpls {
	public static synthetic fun invoke$default (Lhep/dataforge/context/Factory;Lhep/dataforge/meta/Meta;Lhep/dataforge/context/Context;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class hep/dataforge/context/Global : hep/dataforge/context/Context {
	public static final field INSTANCE Lhep/dataforge/context/Global;
	public fun close ()V
	public final fun context (Ljava/lang/String;Lhep/dataforge/context/Context;Lkotlin/jvm/functions/Function1;)Lhep/dataforge/context/Context;
	public static synthetic fun context$default (Lhep/dataforge/context/Global;Ljava/lang/String;Lhep/dataforge/context/Context;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lhep/dataforge/context/Context;
	public final fun getContext (Ljava/lang/String;)Lhep/dataforge/context/Context;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
}

public final class hep/dataforge/context/LoggingKt {
	public static final fun getLogger (Lhep/dataforge/context/Context;)Lmu/KLogger;
	public static final fun getLogger (Lhep/dataforge/context/ContextAware;)Lmu/KLogger;
}

public abstract interface class hep/dataforge/context/Plugin : hep/dataforge/context/ContextAware, hep/dataforge/meta/MetaRepr, hep/dataforge/misc/Named, hep/dataforge/provider/Provider {
	public static final field Companion Lhep/dataforge/context/Plugin$Companion;
	public static final field TARGET Ljava/lang/String;
	public abstract fun attach (Lhep/dataforge/context/Context;)V
	public abstract fun dependsOn ()Ljava/util/Map;
	public abstract fun detach ()V
	public abstract fun getMeta ()Lhep/dataforge/meta/Meta;
	public abstract fun getName ()Lhep/dataforge/names/Name;
	public abstract fun getTag ()Lhep/dataforge/context/PluginTag;
	public abstract fun toMeta ()Lhep/dataforge/meta/Meta;
}

public final class hep/dataforge/context/Plugin$Companion {
	public static final field TARGET Ljava/lang/String;
}

public final class hep/dataforge/context/Plugin$DefaultImpls {
	public static fun content (Lhep/dataforge/context/Plugin;Ljava/lang/String;)Ljava/util/Map;
	public static fun getDefaultChainTarget (Lhep/dataforge/context/Plugin;)Ljava/lang/String;
	public static fun getDefaultTarget (Lhep/dataforge/context/Plugin;)Ljava/lang/String;
	public static fun getName (Lhep/dataforge/context/Plugin;)Lhep/dataforge/names/Name;
	public static fun toMeta (Lhep/dataforge/context/Plugin;)Lhep/dataforge/meta/Meta;
}

public abstract interface class hep/dataforge/context/PluginFactory : hep/dataforge/context/Factory {
	public static final field Companion Lhep/dataforge/context/PluginFactory$Companion;
	public static final field TYPE Ljava/lang/String;
	public abstract fun getTag ()Lhep/dataforge/context/PluginTag;
	public abstract fun getType ()Lkotlin/reflect/KClass;
}

public final class hep/dataforge/context/PluginFactory$Companion {
	public static final field TYPE Ljava/lang/String;
}

public final class hep/dataforge/context/PluginManager : hep/dataforge/context/ContextAware, java/lang/Iterable, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> (Lhep/dataforge/context/Context;)V
	public final fun fetch (Lhep/dataforge/context/PluginFactory;Lhep/dataforge/meta/Meta;Z)Lhep/dataforge/context/Plugin;
	public final fun fetch (Lhep/dataforge/context/PluginFactory;ZLkotlin/jvm/functions/Function1;)Lhep/dataforge/context/Plugin;
	public static synthetic fun fetch$default (Lhep/dataforge/context/PluginManager;Lhep/dataforge/context/PluginFactory;Lhep/dataforge/meta/Meta;ZILjava/lang/Object;)Lhep/dataforge/context/Plugin;
	public static synthetic fun fetch$default (Lhep/dataforge/context/PluginManager;Lhep/dataforge/context/PluginFactory;ZLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lhep/dataforge/context/Plugin;
	public final fun find (ZLkotlin/jvm/functions/Function1;)Lhep/dataforge/context/Plugin;
	public static synthetic fun find$default (Lhep/dataforge/context/PluginManager;ZLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lhep/dataforge/context/Plugin;
	public final fun get (Lhep/dataforge/context/PluginTag;Z)Lhep/dataforge/context/Plugin;
	public final fun get (Lkotlin/reflect/KClass;Lhep/dataforge/context/PluginTag;Z)Ljava/lang/Object;
	public static synthetic fun get$default (Lhep/dataforge/context/PluginManager;Lhep/dataforge/context/PluginTag;ZILjava/lang/Object;)Lhep/dataforge/context/Plugin;
	public static synthetic fun get$default (Lhep/dataforge/context/PluginManager;Lkotlin/reflect/KClass;Lhep/dataforge/context/PluginTag;ZILjava/lang/Object;)Ljava/lang/Object;
	public fun getContext ()Lhep/dataforge/context/Context;
	public fun iterator ()Ljava/util/Iterator;
	public final fun list (Z)Ljava/util/Collection;
	public final fun load (Lhep/dataforge/context/Plugin;)Lhep/dataforge/context/Plugin;
	public final fun load (Lhep/dataforge/context/PluginFactory;Lhep/dataforge/meta/Meta;)Lhep/dataforge/context/Plugin;
	public final fun load (Lhep/dataforge/context/PluginFactory;Lkotlin/jvm/functions/Function1;)Lhep/dataforge/context/Plugin;
	public static synthetic fun load$default (Lhep/dataforge/context/PluginManager;Lhep/dataforge/context/PluginFactory;Lhep/dataforge/meta/Meta;ILjava/lang/Object;)Lhep/dataforge/context/Plugin;
	public final fun remove (Lhep/dataforge/context/Plugin;)V
}

public final class hep/dataforge/context/PluginTag : hep/dataforge/meta/MetaRepr {
	public static final field Companion Lhep/dataforge/context/PluginTag$Companion;
	public static final field DATAFORGE_GROUP Ljava/lang/String;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lhep/dataforge/context/PluginTag;
	public static synthetic fun copy$default (Lhep/dataforge/context/PluginTag;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lhep/dataforge/context/PluginTag;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getGroup ()Ljava/lang/String;
	public final fun getName ()Ljava/lang/String;
	public final fun getVersion ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun matches (Lhep/dataforge/context/PluginTag;)Z
	public fun toMeta ()Lhep/dataforge/meta/Meta;
	public fun toString ()Ljava/lang/String;
}

public final class hep/dataforge/context/PluginTag$Companion {
	public final fun fromString (Ljava/lang/String;)Lhep/dataforge/context/PluginTag;
}

public final class hep/dataforge/context/ResolveKt {
	public static final fun gather (Lhep/dataforge/context/Context;Ljava/lang/String;Lkotlin/reflect/KClass;Z)Ljava/util/Map;
	public static synthetic fun gather$default (Lhep/dataforge/context/Context;Ljava/lang/String;Lkotlin/reflect/KClass;ZILjava/lang/Object;)Ljava/util/Map;
	public static final fun gatherInSequence (Lhep/dataforge/context/Context;Ljava/lang/String;Lkotlin/reflect/KClass;Z)Lkotlin/sequences/Sequence;
	public static synthetic fun gatherInSequence$default (Lhep/dataforge/context/Context;Ljava/lang/String;Lkotlin/reflect/KClass;ZILjava/lang/Object;)Lkotlin/sequences/Sequence;
	public static final fun getValues (Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;
	public static final fun resolve (Lhep/dataforge/context/Context;Ljava/lang/String;Lhep/dataforge/names/Name;Lkotlin/reflect/KClass;)Ljava/lang/Object;
}

public abstract interface annotation class hep/dataforge/descriptors/Attribute : java/lang/annotation/Annotation {
	public abstract fun key ()Ljava/lang/String;
	public abstract fun value ()Ljava/lang/String;
}

public abstract interface annotation class hep/dataforge/descriptors/Attributes : java/lang/annotation/Annotation {
	public abstract fun attrs ()[Lhep/dataforge/descriptors/Attribute;
}

public abstract interface annotation class hep/dataforge/descriptors/ItemDef : java/lang/annotation/Annotation {
	public abstract fun info ()Ljava/lang/String;
	public abstract fun multiple ()Z
	public abstract fun required ()Z
}

public abstract interface annotation class hep/dataforge/descriptors/ValueDef : java/lang/annotation/Annotation {
	public abstract fun allowed ()[Ljava/lang/String;
	public abstract fun def ()Ljava/lang/String;
	public abstract fun enumeration ()Ljava/lang/Class;
	public abstract fun type ()[Lhep/dataforge/values/ValueType;
}

public final class hep/dataforge/properties/ConfigProperty : hep/dataforge/properties/Property {
	public fun <init> (Lhep/dataforge/meta/Config;Lhep/dataforge/names/Name;Lhep/dataforge/meta/transformations/MetaConverter;)V
	public final fun getConfig ()Lhep/dataforge/meta/Config;
	public final fun getConverter ()Lhep/dataforge/meta/transformations/MetaConverter;
	public final fun getName ()Lhep/dataforge/names/Name;
	public fun getValue ()Ljava/lang/Object;
	public fun onChange (Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V
	public fun removeChangeListener (Ljava/lang/Object;)V
	public fun setValue (Ljava/lang/Object;)V
}

public abstract interface class hep/dataforge/properties/Property {
	public abstract fun getValue ()Ljava/lang/Object;
	public abstract fun onChange (Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V
	public abstract fun removeChangeListener (Ljava/lang/Object;)V
	public abstract fun setValue (Ljava/lang/Object;)V
}

public final class hep/dataforge/properties/Property$DefaultImpls {
	public static synthetic fun onChange$default (Lhep/dataforge/properties/Property;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
	public static synthetic fun removeChangeListener$default (Lhep/dataforge/properties/Property;Ljava/lang/Object;ILjava/lang/Object;)V
}

public final class hep/dataforge/properties/PropertyKt {
	public static final fun bind (Lhep/dataforge/properties/Property;Lhep/dataforge/properties/Property;)V
	public static final fun mirror (Lhep/dataforge/properties/Property;Lhep/dataforge/properties/Property;Lkotlinx/coroutines/CoroutineScope;)V
	public static final fun toFlow (Lhep/dataforge/properties/Property;)Lkotlinx/coroutines/flow/StateFlow;
}

public final class hep/dataforge/provider/DfTypeKt {
	public static final fun getDfType (Lkotlin/reflect/KClass;)Ljava/lang/String;
}

public final class hep/dataforge/provider/Path : java/lang/Iterable, kotlin/jvm/internal/markers/KMappedMarker {
	public static final field Companion Lhep/dataforge/provider/Path$Companion;
	public static final field PATH_SEGMENT_SEPARATOR Ljava/lang/String;
	public static final synthetic fun box-impl (Ljava/util/List;)Lhep/dataforge/provider/Path;
	public static fun constructor-impl (Ljava/util/List;)Ljava/util/List;
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (Ljava/util/List;Ljava/lang/Object;)Z
	public static final fun equals-impl0 (Ljava/util/List;Ljava/util/List;)Z
	public final fun getTokens ()Ljava/util/List;
	public fun hashCode ()I
	public static fun hashCode-impl (Ljava/util/List;)I
	public fun iterator ()Ljava/util/Iterator;
	public static fun iterator-impl (Ljava/util/List;)Ljava/util/Iterator;
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (Ljava/util/List;)Ljava/lang/String;
	public final synthetic fun unbox-impl ()Ljava/util/List;
}

public final class hep/dataforge/provider/Path$Companion {
	public final fun parse-AnEnhig (Ljava/lang/String;)Ljava/util/List;
}

public final class hep/dataforge/provider/PathKt {
	public static final fun Path ([Lhep/dataforge/names/Name;)Ljava/util/List;
	public static final fun Path ([Lkotlin/Pair;)Ljava/util/List;
	public static final fun asPath (Lhep/dataforge/names/Name;Ljava/lang/String;)Ljava/util/List;
	public static final fun asPath (Lhep/dataforge/provider/PathToken;)Ljava/util/List;
	public static synthetic fun asPath$default (Lhep/dataforge/names/Name;Ljava/lang/String;ILjava/lang/Object;)Ljava/util/List;
	public static final fun getHead-Ipm_iiw (Ljava/util/List;)Lhep/dataforge/provider/PathToken;
	public static final fun getLength-Ipm_iiw (Ljava/util/List;)I
	public static final fun getTail-Ipm_iiw (Ljava/util/List;)Ljava/util/List;
	public static final fun plus-BlTXZnM (Ljava/util/List;Ljava/util/List;)Ljava/util/List;
}

public final class hep/dataforge/provider/PathToken {
	public static final field Companion Lhep/dataforge/provider/PathToken$Companion;
	public static final field TARGET_SEPARATOR Ljava/lang/String;
	public fun <init> (Lhep/dataforge/names/Name;Ljava/lang/String;)V
	public synthetic fun <init> (Lhep/dataforge/names/Name;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lhep/dataforge/names/Name;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Lhep/dataforge/names/Name;Ljava/lang/String;)Lhep/dataforge/provider/PathToken;
	public static synthetic fun copy$default (Lhep/dataforge/provider/PathToken;Lhep/dataforge/names/Name;Ljava/lang/String;ILjava/lang/Object;)Lhep/dataforge/provider/PathToken;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Lhep/dataforge/names/Name;
	public final fun getTarget ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class hep/dataforge/provider/PathToken$Companion {
	public final fun parse (Ljava/lang/String;)Lhep/dataforge/provider/PathToken;
}

public abstract interface class hep/dataforge/provider/Provider {
	public abstract fun content (Ljava/lang/String;)Ljava/util/Map;
	public abstract fun getDefaultChainTarget ()Ljava/lang/String;
	public abstract fun getDefaultTarget ()Ljava/lang/String;
}

public final class hep/dataforge/provider/Provider$DefaultImpls {
	public static fun content (Lhep/dataforge/provider/Provider;Ljava/lang/String;)Ljava/util/Map;
	public static fun getDefaultChainTarget (Lhep/dataforge/provider/Provider;)Ljava/lang/String;
	public static fun getDefaultTarget (Lhep/dataforge/provider/Provider;)Ljava/lang/String;
}

public final class hep/dataforge/provider/ProviderKt {
	public static final fun provide-mzxrFLw (Lhep/dataforge/provider/Provider;Ljava/util/List;Ljava/lang/String;)Ljava/lang/Object;
	public static synthetic fun provide-mzxrFLw$default (Lhep/dataforge/provider/Provider;Ljava/util/List;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun top (Lhep/dataforge/provider/Provider;Ljava/lang/String;Lkotlin/reflect/KClass;)Ljava/util/Map;
}

