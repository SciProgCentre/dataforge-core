package hep.dataforge.meta.descriptors

import hep.dataforge.meta.Laminate
import hep.dataforge.meta.Meta
import hep.dataforge.meta.MetaBase
import hep.dataforge.meta.MetaItem
import hep.dataforge.names.NameToken

/**
 * A [Meta] that is constructed from [NodeDescriptor]
 */
private class DescriptorMeta(val descriptor: NodeDescriptor) : Meta, MetaBase() {
    override val items: Map<NameToken, MetaItem<*>>
        get() = buildMap {
            descriptor.items.forEach { (token, descriptorItem) ->
                val item = descriptorItem.defaultItem()
                if (item != null) {
                    put(NameToken(token), item)
                }
            }
        }
}

/**
 * Generate a laminate representing default item set generated by this descriptor
 */
public fun NodeDescriptor.defaultMeta(): Laminate = Laminate(default, DescriptorMeta(this))

/**
 * Build a default [MetaItem.NodeItem] from this node descriptor
 */
internal fun NodeDescriptor.defaultItem(): MetaItem.NodeItem<*> =
    MetaItem.NodeItem(defaultMeta())

/**
 * Build a default [MetaItem.ValueItem] from this descriptor
 */
internal fun ValueDescriptor.defaultItem(): MetaItem.ValueItem? {
    return MetaItem.ValueItem(default ?: return null)
}

/**
 * Build a default [MetaItem] from descriptor.
 */
public fun ItemDescriptor.defaultItem(): MetaItem<*>? {
    return when (this) {
        is ValueDescriptor -> defaultItem()
        is NodeDescriptor -> defaultItem()
    }
}